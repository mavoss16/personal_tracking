---
title: "Article Data Analysis"
echo: false
message: false
warning: false
format: 
  html:
    embed-resources: true
    page-layout: full
server: shiny
---



```{r}
#| context: setup
#| include: false


library(dplyr)
library(readr)
library(ggplot2)
library(reactable)
library(forcats)
library(shiny)
library(lubridate)
library(zoo)
library(tidyr)
library(shinydashboard)
library(ggwordcloud)
library(stringr)
library(tidytext)
library(pluralize)

# require(notionR)
# library(notionR) # https://github.com/Eflores89/notionR


# http://www.columbia.edu/~sg3637/blog/Time_Series_Heatmaps.html
```


```{r}
#| context: data
#| include: false


# data <- read_rds("article_data.rds")
# publisher_summary <- read_rds("article_publisher_summary.rds")
# date_summary <- read_rds("article_date_summary.rds")
# wday_summary <- read_rds("article_wday_summary.rds")


```


::: {.panel-sidebar}
```{r}

dateRangeInput(
  "date_range_input", label = "Select a Date Range:",
  start = "2023-03-01", end = Sys.Date()
)

# selectizeInput(
#   "publisher_input", label = "Select Publishers",
#   choices = c(unique(data$publisher) |> sort()),
#   selected = c(unique(data$publisher) |> sort()),
#   multiple = TRUE
# )

# actionButton(
#   "run_data_script", label = "Update Article Data"
# )
# htmlOutput(
#   "data_update_text"
# )

```
:::
::: {.panel-fill}

```{r}
#| layout-ncol: 5
actionButton("current_week_input", label = "Current Week")
actionButton("previous_week_input", label = "Previous Week")
actionButton("current_month_input", label = "Current Month")
# actionButton("last_3_month_input", label = "Last 3 Months")
actionButton("current_year_input", label = "Current Year")
actionButton("full_input", label = "All-Time")

```

```{r}
#| layout-ncol: 2
valueBoxOutput("box_articles")
valueBoxOutput("box_days")
```

::: {.panel-tabset}

## Plots
```{r}
plotOutput("bar_publishers_articles")
plotOutput("bar_days_articles")
plotOutput("calendar_articles", height = "750px")
# reactableOutput("dates_test")
```

<!-- ## Test -->
<!-- ```{r} -->
<!-- reactableOutput("test_table") -->
<!-- ``` -->


## Publisher Table
```{r}
reactableOutput("table_publishers")
```

## Article Table
```{r}
reactableOutput("table_articles")
```

## Article Title Wordcloud
```{r, fig.height = 5}
plotOutput("wordcloud")
```


:::
:::

```{r}
#| context: server

observe({
  updateDateRangeInput(
    inputId = "date_range_input", label = "Select a Date Range:",
    start = "2023-03-01", end = Sys.Date()
  )
})

observeEvent(input$current_week_input, {
  updateDateRangeInput(inputId = "date_range_input", start = floor_date(Sys.Date(), unit = "week"), end = Sys.Date())
})
observeEvent(input$previous_week_input, {
  updateDateRangeInput(inputId = "date_range_input", start = floor_date(Sys.Date() - 7, unit = "week"), end = floor_date(Sys.Date(), unit = "week") - 1)
})
observeEvent(input$current_month_input, {
  updateDateRangeInput(inputId = "date_range_input", start = floor_date(Sys.Date(), unit = "month"), end = Sys.Date())
})
observeEvent(input$current_year_input, {
  updateDateRangeInput(inputId = "date_range_input", start = floor_date(Sys.Date(), unit = "year"), end = Sys.Date())
})
observeEvent(input$full_input, {
  updateDateRangeInput(inputId = "date_range_input", start = ymd("2023/03/01"), end = Sys.Date())
})

data <- readRDS(url("https://github.com/mavoss16/personal_tracking/raw/master/articles/article_data.rds", "rb"))

article_data <- reactive({
  data |>
    filter(
      date_read >= min(input$date_range_input) & date_read <= max(input$date_range_input)
    )
})

# output$test_table <- renderReactable({
#   reactable(updated_data())
# })

# Group by publisher
publisher_summary <- reactive({
  article_data() |>
    group_by(publisher) |>
    summarize(
      total_articles = n()
    )
})


# Group by dates
date_summary <- reactive({
  
  # Create base date df
  dates <- data.frame(date_read = min(input$date_range_input, na.rm = T):max(input$date_range_input, na.rm = T) |> as.Date()) |>
    mutate(
      year_read = year(date_read),
      month_read = month(date_read, label = TRUE),
      wday_read = wday(date_read, label = TRUE)
    )
  
  # Group by date - initial date calculations
  date_summary <- article_data() |>
    group_by(date_read, year_read, month_read, wday_read) |>
    summarize(
      total_articles = n()
    )
  
  # Add in days without listening to any podcasts + calculations for calendar heatmap
  date_summary <- left_join(dates, date_summary) |>
    mutate(
      total_articles = replace_na(total_articles, 0)
    ) |>
    mutate(
      year_month = factor(as.yearmon(date_read)),
      week = epiweek(date_read),
      week = ifelse(month_read == "Dec" & week == 1, yes = 53, no = week) # epiweek starts week 1 in December if necessary
    ) |>
    filter(year_month != "Feb 2023") |>
    group_by(year_month) |>
    mutate(month_week = 1 + week - min(week)) |>
    ungroup()

  date_summary
})


# Group by weekdays
wday_summary <- reactive({
  date_summary() |>
    group_by(wday_read) |>
    summarize( 
      avg_articles = mean(total_articles, na.rm = TRUE) |> round(2)
    )
})


# Wordcloud data
wordcloud_data <- reactive({
  
  article_data() |>
    select(article_title) |>
    mutate(
      article_title = tolower(article_title) |> 
        str_remove_all(" - .+$|\\| .+|$") |> 
        str_replace_all("[^a-z]s ", " ") |>
        str_replace_all(" [^a-z ]|[^a-z ] ", " ") |> 
        str_replace_all("[^a-z ]", "")
    ) |>
    unnest_tokens(word, article_title) |>
    filter(!is.na(word), !is.null(word)) |>
    anti_join(stop_words |> mutate(word = str_remove_all(word, "[^a-zA-Z]"))) |>
    count(word) |>
    arrange(-n) |>
    slice(1:100)
})

output$box_articles <- renderValueBox({
  valueBox(
    nrow(article_data()),
    "Total Articles"
  )
})

output$box_days <- renderValueBox({
  valueBox(
    paste0(sum(date_summary()$total_articles >= 1, na.rm = T), "/", nrow(date_summary())),
    "Number of Days"
  )
})


output$table_publishers <- renderReactable({
  reactable(
    publisher_summary() |>
      select(publisher, total_articles),
    columns = list(
      publisher = colDef(name = "Publisher"),
      total_articles = colDef(name = "Total Number of Articles")
    ),
    filterable = TRUE,
    searchable = TRUE
  )
})

output$table_articles <- renderReactable({
  reactable(
    article_data() |>
      select(publisher, article_title, date_read, url),
    columns = list(
      publisher = colDef(name = "Publisher"),
      article_title = colDef(name = "Article Title"),
      date_read = colDef(name = "Date Read"),
      url = colDef(cell = function(value, index) {
        # url <- article_data()[index, "url"]
        htmltools::tags$a(href = value, target = "_blank", "Article Link")
      })
    ),
    filterable = TRUE,
    searchable = TRUE
  )
})


output$bar_publishers_articles <- renderPlot({
  max_value <- max(publisher_summary()$total_articles) * 1.2
  ggplot(
    publisher_summary() |> arrange(-total_articles) |> slice(1:10), 
    aes(x = fct_reorder(publisher, total_articles), y = total_articles, label = total_articles)
    ) +
    geom_col() +
    geom_text(nudge_y = (max_value * 0.025)) +
    scale_y_continuous(limits = c(0, max_value)) +
    labs(x = "", y = "", title = "Top Publishers by Total Articles", fill = "Category") +
    coord_flip() +
    theme_minimal() +
    theme(
      axis.title.x = element_blank(), axis.title.y = element_blank()
    )
})


output$bar_days_articles <- renderPlot({
  ggplot(
    wday_summary(),
    aes(x = fct_rev(wday_read), y = avg_articles, label = avg_articles |> round(1))
  ) +
    geom_col() +
    geom_text(hjust = -.75) +
    labs(x = "", y = "", title = "Days of the Week by Average Articles per Day") +
    coord_flip() +
  theme_minimal()
})

output$calendar_articles <- renderPlot({
  
  ggplot(date_summary(), aes(x = wday_read, y = -month_week, label = total_articles, fill = total_articles)) +
    geom_tile(color = "white") +
    geom_text() +
    facet_grid(month_read~year_read) +
    scale_fill_gradient(low = "red", high = "green") +
    scale_y_continuous() +
    labs(title = "Calendar Heatmap - Articles Read", fill = "Articles") +
    theme_bw() +
    theme(
      axis.text.y = element_blank(), axis.ticks.y = element_blank(),
      axis.title.x = element_blank(), axis.title.y = element_blank()
    )
})

output$wordcloud <- renderPlot({
  # wordcloud(wordcloud_data(), max.words = 200)
  if(max(wordcloud_data()$n) / max(wordcloud_data()$n) <= 2){
    word_max_size = 10
  } else{
    word_max_size = 25
  }
  ggplot(data = wordcloud_data() |> slice(1:100), aes(label = word, size = n)) +
    geom_text_wordcloud() +
    scale_size_area(max_size = word_max_size) +
    theme_minimal()
  
})


```

